"webpack_dev_server macro"
load("@aspect_rules_js//js:defs.bzl", "js_binary")
load("@aspect_bazel_lib//lib:paths.bzl", "BASH_RLOCATION_FUNCTION")
load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_file_to_bin_action", "copy_files_to_bin_actions")

_attrs = {
	"webpack_config": attr.label(
		allow_single_file = [".js"],
        mandatory = False
	),
	"webpack": attr.label(executable = True, default = "@webpack", cfg = "exec"),
	"srcs": attr.label_list(allow_files = True),
	"deps": attr.label_list(),
	"_ibazel_webpack_plugin": attr.label(allow_single_file = [".js"], default = Label("//webpack/private/devserver:webpack.config.js")),
    "_windows_constraint": attr.label(default = "@platforms//os:windows"),
}

def _impl(ctx):
    is_windows = ctx.target_platform_has_constraint(ctx.attr._windows_constraint[platform_common.ConstraintValueInfo])

    # Add srcs to runfiles
    srcs = copy_files_to_bin_actions(ctx, ctx.files.srcs, is_windows = is_windows)
    wrunfiles = ctx.runfiles(files = srcs)

    # Add deps to runfiles
    wrunfiles = wrunfiles.merge_all([dep[DefaultInfo].default_runfiles for dep in ctx.attr.deps])


    # Add webpack to runfiles
    defaultinfo = ctx.attr.webpack[DefaultInfo]
    wrunfiles = wrunfiles.merge(defaultinfo.default_runfiles)


    args = [
        "-c", 
        ctx.file._ibazel_webpack_plugin.path
    ]

    # Add configs to runfiles
    config_files = [ctx.file._ibazel_webpack_plugin]

    if ctx.attr.webpack_config:
        webpack_config_file = copy_file_to_bin_action(ctx, ctx.file.webpack_config, is_windows = is_windows)
        config_files.append(webpack_config_file)
        args.extend(["-c", webpack_config_file.short_path, "--merge"])

    wrunfiles = wrunfiles.merge(ctx.runfiles(files = config_files))

    webpack_path = ctx.workspace_name + "/" + defaultinfo.files_to_run.executable.short_path


    command = """
    #!/usr/bin/env bash
    set -o pipefail -o errexit -o nounset
    export RUNFILES_DIR="$0.runfiles"
    pwd
    ${{RUNFILES_DIR}}/{webpack_path} serve {args} $@
    """.format(
        args = " ".join(args),
        rlocation_function = BASH_RLOCATION_FUNCTION,
        webpack_path = webpack_path
    )

    ctx.actions.write(
        output = ctx.outputs.executable,
        content = command,
        is_executable = True,
    )


    return [DefaultInfo(
        runfiles = wrunfiles
    )]

webpack_dev_server = rule(
	implementation = _impl,
	attrs = _attrs,
	executable = True,
)

# def webpack_dev_server(
#         name,
#         webpack_config,
#         webpack = "@webpack",
#         args = [],
#         data = [],
#         _ibazel_webpack_plugin = Label("//webpack/private/devserver:webpack.config.js"),
#         **kwargs):
#     """Use webpack with a development server that provides live reloading. This should be used for development only.

#     Args:
#       name: The name of the dev server target.
#       webpack: Webpack toolchain to use. Should be a workspace generated by webpack_register_toolchains and only the workspace name is used.
#       webpack_config: Webpack configuration file.

#         See https://webpack.js.org/configuration/
#       args: Command line arguments to pass to Webpack.

#         These argument passed on the command line before arguments that are added by the rule.
#         Run `bazel` with `--subcommands` to see what Webpack CLI command line was invoked.

#         See the [Webpack CLI docs](https://webpack.js.org/api/cli/) for a complete list of supported arguments.
#       data: Runtime dependencies which may be loaded during compliation.
#       _ibazel_webpack_plugin: Internal use only. Webpack plugin used as a communication layer between ibazel's build event signalling semantics and webpacks file watching semantics.
#       **kwargs: passed through to `run_js_binary`
#     """
#     workspace_name = Label(webpack).workspace_name
#     webpack_deps = ["@webpack//:jsp__webpack", "@webpack//:jsp__webpack-dev-server", "@webpack//:jsp__webpack-cli"]

#     js_binary(
#         name = name,
#         tags = ["ibazel_notify_changes"] + kwargs.pop("tags", []),
#         entry_point = "@%s//:entrypoint" % workspace_name,
#         args = [
#             "serve",
#             "-c",
#             "./$(execpath %s)" % _ibazel_webpack_plugin,
#             "--merge",
#             "-c",
#             "./$(execpath %s)" % webpack_config,
#         ] + args,
#         data = [
#             webpack_config,
#             _ibazel_webpack_plugin,
#         ] + webpack_deps + data,
#         **kwargs
#     )

